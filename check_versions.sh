#!/bin/bash
# check_versions.sh - Check for new versions of Pushpin
# Auto-commits and pushes changes when new versions are detected

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VERSIONS_FILE="$SCRIPT_DIR/versions.json"

# Parse command line arguments
MODE="check"
DRY_RUN=0
FORCE=0

while [[ $# -gt 0 ]]; do
    case $1 in
        --update)
            MODE="update"
            shift
            ;;
        --check-only)
            MODE="check"
            shift
            ;;
        --dry-run)
            DRY_RUN=1
            shift
            ;;
        --force)
            FORCE=1
            shift
            ;;
        --help)
            echo "Usage: $0 [--check-only|--update] [--dry-run] [--force]"
            echo "  --check-only  Check for updates but don't modify anything (default)"
            echo "  --update      Update versions.json and commit+push if changed"
            echo "  --dry-run     Show what would be done without making changes"
            echo "  --force       Force update even if versions haven't changed"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Function to get current timestamp
get_timestamp() {
    date -u +"%Y-%m-%dT%H:%M:%SZ"
}

# Function to get latest Pushpin release from GitHub
get_pushpin_version() {
    local api_url="https://api.github.com/repos/fastly/pushpin/releases/latest"
    local version=""
    
    # Try to get version from GitHub API
    if command -v curl >/dev/null 2>&1; then
        version=$(curl -s "$api_url" | grep '"tag_name"' | sed 's/.*"v\?\([^"]*\)".*/\1/')
    fi
    
    if [ -n "$version" ] && [ "$version" != "null" ]; then
        # Remove 'v' prefix if present
        echo "$version" | sed 's/^v//'
    else
        echo "unknown"
    fi
}

# Function to get Pushpin release date
get_pushpin_release_date() {
    local api_url="https://api.github.com/repos/fastly/pushpin/releases/latest"
    local release_date=""
    
    if command -v curl >/dev/null 2>&1; then
        release_date=$(curl -s "$api_url" | grep '"published_at"' | sed 's/.*"published_at": *"\([^"]*\)".*/\1/')
    fi
    
    if [ -n "$release_date" ] && [ "$release_date" != "null" ]; then
        echo "$release_date"
    else
        echo "$(get_timestamp)"
    fi
}

# Function to get Pushpin download URL
get_pushpin_download_url() {
    local version="$1"
    echo "https://github.com/fastly/pushpin/archive/refs/tags/v${version}.tar.gz"
}

# Function to read current versions from JSON
read_current_versions() {
    if [ -f "$VERSIONS_FILE" ]; then
        CURRENT_VERSION=$(grep -A1 '"pushpin"' "$VERSIONS_FILE" | grep '"version"' | sed 's/.*"version": *"\([^"]*\)".*/\1/')
        CURRENT_RELEASE_DATE=$(grep -A2 '"pushpin"' "$VERSIONS_FILE" | grep '"release_date"' | sed 's/.*"release_date": *"\([^"]*\)".*/\1/')
    else
        CURRENT_VERSION=""
        CURRENT_RELEASE_DATE=""
    fi
}

# Function to write versions to JSON
write_versions() {
    local version="$1"
    local release_date="$2"
    local download_url="$3"
    local timestamp="$(get_timestamp)"
    
    cat > "$VERSIONS_FILE" <<EOF
{
  "pushpin": {
    "version": "$version",
    "release_date": "$release_date",
    "download_url": "$download_url",
    "source": "github-releases",
    "last_checked": "$timestamp"
  },
  "last_update": "$timestamp"
}
EOF
}

# Function to commit and push changes
commit_and_push() {
    local old_version="$1"
    local new_version="$2"
    
    cd "$SCRIPT_DIR"
    
    # Configure git if needed (for CI environments)
    if ! git config user.name >/dev/null 2>&1; then
        git config user.name "Version Checker Bot"
        git config user.email "bot@github-actions"
    fi
    
    # Stage the versions file
    git add versions.json
    
    # Create commit message
    local commit_msg=""
    
    if [ "$old_version" != "$new_version" ]; then
        commit_msg="Auto-update: Pushpin $old_version -> $new_version"
    else
        commit_msg="Force update versions.json"
    fi
    
    commit_msg="$commit_msg

This commit triggers automatic COPR rebuild with latest version.
Generated by check_versions.sh on $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
    
    # Commit
    git commit -m "$commit_msg"
    
    # Push to origin
    git push origin main
}

# Main execution
echo "=== Pushpin Version Check Script ==="
echo "Mode: $MODE"
echo "Checking versions at $(get_timestamp)"
echo

# Get current versions from file
read_current_versions

# Get latest version
echo "Checking latest Pushpin version..."
NEW_VERSION=$(get_pushpin_version)
NEW_RELEASE_DATE=$(get_pushpin_release_date)
NEW_DOWNLOAD_URL=$(get_pushpin_download_url "$NEW_VERSION")

echo "Latest Pushpin version: $NEW_VERSION"
echo "Release date: $NEW_RELEASE_DATE"
echo

# Compare versions
VERSIONS_CHANGED=0
if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
    VERSIONS_CHANGED=1
fi

if [ $FORCE -eq 1 ]; then
    echo "Force mode enabled - will update regardless of changes"
    VERSIONS_CHANGED=1
fi

# Report status
if [ $VERSIONS_CHANGED -eq 1 ]; then
    echo "=== Version changes detected ==="
    if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
        echo "  Pushpin: $CURRENT_VERSION -> $NEW_VERSION"
    fi
    echo
    
    if [ "$MODE" = "update" ]; then
        if [ $DRY_RUN -eq 1 ]; then
            echo "DRY RUN: Would update versions.json"
            echo "DRY RUN: Would commit with message about version changes"
            echo "DRY RUN: Would push to origin/main"
        else
            echo "Updating versions.json..."
            write_versions "$NEW_VERSION" "$NEW_RELEASE_DATE" "$NEW_DOWNLOAD_URL"
            echo "versions.json updated"
            
            echo "Committing and pushing changes..."
            commit_and_push "$CURRENT_VERSION" "$NEW_VERSION"
            echo "Changes committed and pushed successfully"
        fi
    else
        echo "Running in check-only mode - no changes made"
        echo "Run with --update to apply changes"
    fi
    
    exit 1  # Exit with error code to indicate changes available
else
    echo "=== No version changes detected ==="
    echo "  Pushpin: $CURRENT_VERSION (unchanged)"
    exit 0
fi